// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: cluster-autoscaler/expander/grpcplugin/expander.proto

package grpcplugin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	v1 "k8s.io/api/core/v1"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BestOptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Options []*Option `protobuf:"bytes,1,rep,name=options,proto3" json:"options,omitempty"`
	// can use api core node struct, we only need it, uniquely identify with string! should be all the info we need.
	NodeInfoMap map[string]*v1.Node `protobuf:"bytes,2,rep,name=nodeInfoMap,proto3" json:"nodeInfoMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BestOptionRequest) Reset() {
	*x = BestOptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_autoscaler_expander_grpcplugin_expander_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BestOptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BestOptionRequest) ProtoMessage() {}

func (x *BestOptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_autoscaler_expander_grpcplugin_expander_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BestOptionRequest.ProtoReflect.Descriptor instead.
func (*BestOptionRequest) Descriptor() ([]byte, []int) {
	return file_cluster_autoscaler_expander_grpcplugin_expander_proto_rawDescGZIP(), []int{0}
}

func (x *BestOptionRequest) GetOptions() []*Option {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *BestOptionRequest) GetNodeInfoMap() map[string]*v1.Node {
	if x != nil {
		return x.NodeInfoMap
	}
	return nil
}

type BestOptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Option *Option `protobuf:"bytes,1,opt,name=option,proto3" json:"option,omitempty"`
}

func (x *BestOptionResponse) Reset() {
	*x = BestOptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_autoscaler_expander_grpcplugin_expander_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BestOptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BestOptionResponse) ProtoMessage() {}

func (x *BestOptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_autoscaler_expander_grpcplugin_expander_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BestOptionResponse.ProtoReflect.Descriptor instead.
func (*BestOptionResponse) Descriptor() ([]byte, []int) {
	return file_cluster_autoscaler_expander_grpcplugin_expander_proto_rawDescGZIP(), []int{1}
}

func (x *BestOptionResponse) GetOption() *Option {
	if x != nil {
		return x.Option
	}
	return nil
}

type Option struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//google.protobuf.Value nodeGroup = 1;
	// only need the ID of nodegroup to uniquely identify the group, use this in the nodeInfo map.
	NodeGroupId string    `protobuf:"bytes,1,opt,name=nodeGroupId,proto3" json:"nodeGroupId,omitempty"`
	NodeCount   int32     `protobuf:"varint,2,opt,name=nodeCount,proto3" json:"nodeCount,omitempty"`
	Debug       string    `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
	Pod         []*v1.Pod `protobuf:"bytes,4,rep,name=pod,proto3" json:"pod,omitempty"`
}

func (x *Option) Reset() {
	*x = Option{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_autoscaler_expander_grpcplugin_expander_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Option) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Option) ProtoMessage() {}

func (x *Option) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_autoscaler_expander_grpcplugin_expander_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Option.ProtoReflect.Descriptor instead.
func (*Option) Descriptor() ([]byte, []int) {
	return file_cluster_autoscaler_expander_grpcplugin_expander_proto_rawDescGZIP(), []int{2}
}

func (x *Option) GetNodeGroupId() string {
	if x != nil {
		return x.NodeGroupId
	}
	return ""
}

func (x *Option) GetNodeCount() int32 {
	if x != nil {
		return x.NodeCount
	}
	return 0
}

func (x *Option) GetDebug() string {
	if x != nil {
		return x.Debug
	}
	return ""
}

func (x *Option) GetPod() []*v1.Pod {
	if x != nil {
		return x.Pod
	}
	return nil
}

var File_cluster_autoscaler_expander_grpcplugin_expander_proto protoreflect.FileDescriptor

var file_cluster_autoscaler_expander_grpcplugin_expander_proto_rawDesc = []byte{
	0x0a, 0x35, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2d, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x72, 0x2f, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x2f, 0x67, 0x72,
	0x70, 0x63, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x67, 0x72, 0x70, 0x63, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x1a, 0x22, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xed, 0x01, 0x0a, 0x11, 0x42, 0x65, 0x73, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x50, 0x0a, 0x0b, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x42, 0x65,
	0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x1a, 0x58, 0x0a,
	0x10, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x40, 0x0a, 0x12, 0x42, 0x65, 0x73, 0x74, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a,
	0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x89, 0x01, 0x0a, 0x06, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x29, 0x0a, 0x03, 0x70, 0x6f,
	0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x64,
	0x52, 0x03, 0x70, 0x6f, 0x64, 0x32, 0x59, 0x0a, 0x08, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65,
	0x72, 0x12, 0x4d, 0x0a, 0x0a, 0x42, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x42, 0x65, 0x73,
	0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x42, 0x65, 0x73, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x42, 0x28, 0x5a, 0x26, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2d, 0x61, 0x75, 0x74, 0x6f,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2f, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x2f,
	0x67, 0x72, 0x70, 0x63, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_cluster_autoscaler_expander_grpcplugin_expander_proto_rawDescOnce sync.Once
	file_cluster_autoscaler_expander_grpcplugin_expander_proto_rawDescData = file_cluster_autoscaler_expander_grpcplugin_expander_proto_rawDesc
)

func file_cluster_autoscaler_expander_grpcplugin_expander_proto_rawDescGZIP() []byte {
	file_cluster_autoscaler_expander_grpcplugin_expander_proto_rawDescOnce.Do(func() {
		file_cluster_autoscaler_expander_grpcplugin_expander_proto_rawDescData = protoimpl.X.CompressGZIP(file_cluster_autoscaler_expander_grpcplugin_expander_proto_rawDescData)
	})
	return file_cluster_autoscaler_expander_grpcplugin_expander_proto_rawDescData
}

var file_cluster_autoscaler_expander_grpcplugin_expander_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_cluster_autoscaler_expander_grpcplugin_expander_proto_goTypes = []interface{}{
	(*BestOptionRequest)(nil),  // 0: grpcplugin.BestOptionRequest
	(*BestOptionResponse)(nil), // 1: grpcplugin.BestOptionResponse
	(*Option)(nil),             // 2: grpcplugin.Option
	nil,                        // 3: grpcplugin.BestOptionRequest.NodeInfoMapEntry
	(*v1.Pod)(nil),             // 4: k8s.io.api.core.v1.Pod
	(*v1.Node)(nil),            // 5: k8s.io.api.core.v1.Node
}
var file_cluster_autoscaler_expander_grpcplugin_expander_proto_depIdxs = []int32{
	2, // 0: grpcplugin.BestOptionRequest.options:type_name -> grpcplugin.Option
	3, // 1: grpcplugin.BestOptionRequest.nodeInfoMap:type_name -> grpcplugin.BestOptionRequest.NodeInfoMapEntry
	2, // 2: grpcplugin.BestOptionResponse.option:type_name -> grpcplugin.Option
	4, // 3: grpcplugin.Option.pod:type_name -> k8s.io.api.core.v1.Pod
	5, // 4: grpcplugin.BestOptionRequest.NodeInfoMapEntry.value:type_name -> k8s.io.api.core.v1.Node
	0, // 5: grpcplugin.Expander.BestOption:input_type -> grpcplugin.BestOptionRequest
	1, // 6: grpcplugin.Expander.BestOption:output_type -> grpcplugin.BestOptionResponse
	6, // [6:7] is the sub-list for method output_type
	5, // [5:6] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_cluster_autoscaler_expander_grpcplugin_expander_proto_init() }
func file_cluster_autoscaler_expander_grpcplugin_expander_proto_init() {
	if File_cluster_autoscaler_expander_grpcplugin_expander_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cluster_autoscaler_expander_grpcplugin_expander_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BestOptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_autoscaler_expander_grpcplugin_expander_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BestOptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_autoscaler_expander_grpcplugin_expander_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Option); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cluster_autoscaler_expander_grpcplugin_expander_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cluster_autoscaler_expander_grpcplugin_expander_proto_goTypes,
		DependencyIndexes: file_cluster_autoscaler_expander_grpcplugin_expander_proto_depIdxs,
		MessageInfos:      file_cluster_autoscaler_expander_grpcplugin_expander_proto_msgTypes,
	}.Build()
	File_cluster_autoscaler_expander_grpcplugin_expander_proto = out.File
	file_cluster_autoscaler_expander_grpcplugin_expander_proto_rawDesc = nil
	file_cluster_autoscaler_expander_grpcplugin_expander_proto_goTypes = nil
	file_cluster_autoscaler_expander_grpcplugin_expander_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ExpanderClient is the client API for Expander service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ExpanderClient interface {
	BestOption(ctx context.Context, in *BestOptionRequest, opts ...grpc.CallOption) (*BestOptionResponse, error)
}

type expanderClient struct {
	cc grpc.ClientConnInterface
}

func NewExpanderClient(cc grpc.ClientConnInterface) ExpanderClient {
	return &expanderClient{cc}
}

func (c *expanderClient) BestOption(ctx context.Context, in *BestOptionRequest, opts ...grpc.CallOption) (*BestOptionResponse, error) {
	out := new(BestOptionResponse)
	err := c.cc.Invoke(ctx, "/grpcplugin.Expander/BestOption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExpanderServer is the server API for Expander service.
type ExpanderServer interface {
	BestOption(context.Context, *BestOptionRequest) (*BestOptionResponse, error)
}

// UnimplementedExpanderServer can be embedded to have forward compatible implementations.
type UnimplementedExpanderServer struct {
}

func (*UnimplementedExpanderServer) BestOption(context.Context, *BestOptionRequest) (*BestOptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BestOption not implemented")
}

func RegisterExpanderServer(s *grpc.Server, srv ExpanderServer) {
	s.RegisterService(&_Expander_serviceDesc, srv)
}

func _Expander_BestOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BestOptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpanderServer).BestOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcplugin.Expander/BestOption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpanderServer).BestOption(ctx, req.(*BestOptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Expander_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpcplugin.Expander",
	HandlerType: (*ExpanderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BestOption",
			Handler:    _Expander_BestOption_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cluster-autoscaler/expander/grpcplugin/expander.proto",
}
